"Standard IO streams implementation"
Class <<< #Thread
    superclass: Object;
    slots: {
        #handle.
        #entryPoint.
        #result
    };
	package: 'Kernel-Thread'.

"Normal non-recursive mutex"
Class <<< #UniqueLock
    superclass: Object;
    layoutType: #bytes;
    slots: {
        #handle => Unix pthread_mutex_t.
    };
	package: 'Kernel-Thread'.

"Recursive mutex"
Class <<< #Mutex
    superclass: UniqueLock;
    layoutType: #bytes;
    slots: {};
	package: 'Kernel-Thread'.

Class <<< #ConditionVariable
    superclass: Object;
    layoutType: #bytes;
    slots: {
        #handle => Unix pthread_cond_t.
    };
	package: 'Kernel-Thread'.

Class <<< #Semaphore
    superclass: Object;
    layoutType: #bytes;
    slots: {
        #mutex => Unix pthread_mutex_t.
        #condition => Unix pthread_cond_t.
        #signalCount => UInt32
    };
	package: 'Kernel-Thread'.

Namespace named: #ObjectModel members: [

    Constant named: #threadEntryPoint value: [<Void pointer> :threadObject<Void pointer> |
        <localReturn>
        <cdecl>

        "Execute the entry point"
        let threadDynObject := threadObject reinterpretCastTo: _DynamicObject.
        threadDynObject executeEntryPoint.

        releaseReference #{threadObject reinterpretCastTo: ObjectHeader pointer}.
        ^ nil
    ]
].

Thread class category: 'construction' methods: {
:[entryPoint: anEntryPoint
    ^ self new entryPoint: anEntryPoint
]
}.

Thread category: 'accessing' methods: {
:[entryPoint
    ^ entryPoint
].

:[entryPoint: anEntryPoint
    entryPoint := anEntryPoint
].

:[result
    ^ result
].

:[result: aResult
    result := aResult
].
}.

Thread category: 'scheduling' methods: {
:[run
    handle ifNotNil: [
        self error: 'Cannot re-run a thread that has not finished.'
    ].

    handle := ByteArray new: Unix pthread_t size.
    let threadObject := self reinterpretCastTo: ObjectModel ObjectHeader pointer.
    ObjectModel increaseReference #{threadObject}.
    Unix pthread_create #{handle firstFixedFieldPointerOfType: Unix pthread_t pointer . nil . ObjectModel threadEntryPoint address. threadObject }.
].

:[join
    handle ifNil: [
        self error: 'Joining a destroyed thread.'
    ].

    let handlePointer := handle firstFixedFieldPointerOfType: Unix pthread_t pointer.
    let ignoredResult<Void pointer>.
    Unix pthread_join #{handlePointer value . ignoredResult address}.

    ^ result
].

}.

Thread category: 'private' methods: {
:[executeEntryPoint
    result := entryPoint value
]
}.

BlockClosure category: 'threads' methods: {
:[runInThread
    ^ (Thread entryPoint: self) run; yourself
]
}.

"UniqueLock and Mutex"
Object category: 'testing' methods: {
:[isPThreadMutex
    ^ false
]
}.

UniqueLock category: 'testing' methods: {
:[isPThreadMutex
    ^ true
]
}.

UniqueLock category: 'initialization' methods: {
:[initialize
    Unix pthread_mutex_init #{handle address . nil}
].

:[finalize
    Unix pthread_mutex_destroy #{handle address}.
].
}.

UniqueLock category: 'mutual exclusion' methods: {
:[critical: aBlock
    self lock.
    aBlock ensure: [self unlock]
].

:[lock
    Unix pthread_mutex_lock #{handle address}.
].

:[unlock
    Unix pthread_mutex_unlock #{handle address}.
].

}.

"Recursive Mutex"
Mutex category: 'initialization' methods: {
:[initialize
    "Create the attribute"
    let attr<Unix pthread_mutexattr_t>.
    Unix pthread_mutexattr_init #{attr address}.
    Unix pthread_mutexattr_settype #{attr address . Unix PTHREAD_MUTEX_RECURSIVE}.

    Unix pthread_mutex_init #{handle address . attr address}.

    Unix pthread_mutexattr_destroy #{attr address}.
].

}.

"Condition variable"
ConditionVariable category: 'initialization' methods: {
:[initialize
    let this := self firstFixedFieldPointerOfType: Unix pthread_cond_t pointer.
    Unix pthread_cond_init #{this . nil}.
].

:[finalize
    Unix pthread_cond_destroy #{handle address}.
].
}.

ConditionVariable category: 'condition variable' methods: {
:[wait: anUniqueLockOrMutex
    anUniqueLockOrMutex isPThreadMutex ifFalse: [
        self error: 'Expected an UniqueLock or a Mutex'
    ].

    let mutex := anUniqueLockOrMutex castTo: UniqueLock.
].

:[wait: anUniqueLockOrMutex until: targetTimePoint
    self notYetImplemented
].

:[wait: anUniqueLockOrMutex for: aDuration
    self notYetImplemented
].

:[signal
    Unix pthread_cond_signal #{handle address}
].

:[signalAll
    Unix pthread_cond_broadcast #{handle address}
].

}.

"Semaphore"
let SemaphoreInternalData := Structure anon slots: {
    #mutex => Unix pthread_mutex_t.
    #condition => Unix pthread_cond_t.
    #signalCount => UInt32
}.

Semaphore class category: 'construction' methods: {
:[forMutualExclusion
    ^ self new signal
].
}.

Semaphore category: 'initialization' methods: {
:[initialize
    Unix pthread_mutex_init #{mutex address . nil}.
    Unix pthread_cond_init #{condition address . nil}.
].

:[finalize
    Unix pthread_mutex_destroy #{mutex address}.
    Unix pthread_cond_destroy #{condition address}.
].
}.

Semaphore category: 'communication' methods: {
:[consumeAllSignals
    signalCount := 0.
].

:[signal
    Unix pthread_mutex_lock #{mutex address}.

    signalCount := signalCount + 1.
    Unix pthread_cond_signal #{condition address}.

    Unix pthread_mutex_unlock #{mutex address}.
].

:[wait
    Unix pthread_mutex_lock #{mutex address}.

    "Wait for at least one signal"
    [signalCount == 0] whileTrue: [
        Unix pthread_cond_wait #{condition address . mutex address}
    ].

    "Consume the signal"
    signalCount := signalCount - 1.

    Unix pthread_mutex_unlock #{mutex address}.
].
}.
