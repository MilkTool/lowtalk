"
Bootstrap Smalltalk kernel.
"

let bootstrapClassHierarchy := #(
    "Core classes"
    (nil ProtoObject pointers () ())
    (ProtoObject Object pointers () ())

    (Object Behavior pointers (superclass methodDict format layout) ())
        (Behavior ClassDescription pointers (instanceVariables organization) ())
            (ClassDescription Class pointers (subclasses name classPool sharedPools environment category traitComposition localSelectors) ())
            (ClassDescription Metaclass pointers (thisClass traitComposition localSelectors) ())

    (Object UndefinedObject pointers () ())
    (Object Boolean pointers () ())
        (Object True pointers () ())
        (Object False pointers () ())

    "Magnitude"
    (Object Magnitude pointers () ())
        (Magnitude Character immediate () ())
        (Magnitude Number pointers () ())
            (Number Float pointers () ())
                (Float BoxedFloat64 words () ())
                (Float SmallFloat immediate () ())
            (Number Fraction pointers () ())
            (Number Integer pointers () ())
                    (Integer LargeInteger bytes () ())
                            (LargeInteger LargeNegativeInteger bytes () ())
                            (LargeInteger LargePositiveInteger bytes () ())
                    (Integer SmallInteger immediate () (minVal maxVal))
        (Magnitude LookupKey pointers (key) ())
            (LookupKey Association pointers (value) ())
                (Association LiteralVariable pointers () ())
                    (LiteralVariable ClassVariable pointers () ())
                    (LiteralVariable GlobalVariable pointers () ())
                    (LiteralVariable WorkspaceVariable pointers () ())
    (Object Point pointers () ())

    "Collections"
    (Object Collection pointers () ())
        (Collection HashedCollection pointers (tally array) ())
            (HashedCollection Dictionary pointers () ())
                (Dictionary IdentityDictionary pointers () ())
                    (IdentityDictionary SystemDictionary pointers () ())
                (Dictionary MethodDictionary pointers () ())
            (HashedCollection Set pointers () ())
                (Set IdentitySet pointers () ())
                (Set WeakSet pointers () ())
        (Collection SequenceableCollection pointers () ())
            (SequenceableCollection OrderedCollection pointers (array firstIndex lastIndex) ())
            (Collection ArrayedCollection pointers () ())
                (ArrayedCollection Array variablePointers () ())
                    (Array WeakArray variableWeakPointers () ())
                (ArrayedCollection ByteArray bytes () ())
                (ArrayedCollection String pointers () ())
                    (String ByteString bytes () ())
                    (String WideString words () ())
                    (String Symbol pointers () ())
                        (Symbol ByteSymbol bytes () ())
                        (Symbol WideSymbol words () ())

    "Context"
    (ByteArray CompiledCode mixedBytes () ())
        (CompiledCode CompiledMethod mixedBytes () ())
        (CompiledCode CompiledBlock mixedBytes () ())

    (Object Message pointers (selector args lookupClass) ())
    (Object InstructionStream pointers (sender pc) ())
        (InstructionStream Context variablePointers (stackp method closureOrNil receiver) ())

    (Object BlockClosure variablePointers (outerContext startpc numArgs) ())
        (BlockClosure FullBlockClosure variablePointers (receiver) ())

    (Object Mutex pointers () ())
    (Object Semaphore pointers () ())

    "FFI"
   (Object ExternalAddress bytes () (wordSize))
    (Object ExternalObject pointers (handle) ())
        (ExternalObject ExternalFunction pointers (flags argTypes) ())
        (ExternalObject ExternalLibrary pointers (name) ())
        (ExternalObject ExternalStructure pointers () ())
            (ExternalStructure ExternalData pointers (type) ())

    (ByteArray Alien bytes () ())
    (Object UnsafeAlien pointers (nonPointerObject) ())
).

let superClassSlotIndex := 1.

"Compute the size of the instance side"
let classInstanceSizeDictionary := Compiler newDictionary.
bootstrapClassHierarchy do: [:classDefinition |
    let baseName := classDefinition at: 1.
    let name := classDefinition at: 2.
    let type := classDefinition at: 3.
    let instanceVariables := classDefinition at: 4.
    let metaInstanceVariables := classDefinition at: 5.

    let instanceSize := instanceVariables size.
    let metaInstanceSize := metaInstanceVariables size.
    baseName ifNotNil: [
        instanceSize := instanceSize + (classInstanceSizeDictionary at: baseName).
    ].

    classInstanceSizeDictionary at: name put: instanceSize.
].

"Compute the size of the meta side"
let metaclassInstanceSizeDictionary := Compiler newDictionary.
bootstrapClassHierarchy do: [:classDefinition |
    let baseName := classDefinition at: 1.
    let name := classDefinition at: 2.
    let type := classDefinition at: 3.
    let instanceVariables := classDefinition at: 4.
    let metaInstanceVariables := classDefinition at: 5.

    let metaInstanceSize := metaInstanceVariables size.
    baseName ifNotNil: [
        metaInstanceSize := metaInstanceSize + (metaclassInstanceSizeDictionary at: baseName).
    ] ifNil: [
        metaInstanceSize := metaInstanceSize + (classInstanceSizeDictionary at: #Class).
    ].

    metaclassInstanceSizeDictionary at: name put: metaInstanceSize.
].

"Build the class objects"
let metaClassSize := classInstanceSizeDictionary at: #Metaclass.
bootstrapClassHierarchy do: [:classDefinition |
    let baseName := classDefinition at: 1.
    let name := classDefinition at: 2.
    let type := classDefinition at: 3.
    let instanceVariables := classDefinition at: 4.
    let metaInstanceVariables := classDefinition at: 5.

    let instanceSize := classInstanceSizeDictionary at: name.
    let metaInstanceSize := metaclassInstanceSizeDictionary at: name.

    "Create the meta class"
    let metaClass := Compiler objectModel newObjectWithPointers: metaClassSize.
    Compiler objectModel registerClass: metaClass.

    "Create the class"
    let class := Compiler objectModel newObjectWithPointers: metaInstanceSize.
    Compiler objectModel setObject: class class: metaClass.
    Compiler objectModel registerClass: class.

    "Link the super classes."
    baseName ifNotNil: [
        let superClass := _GlobalNamespace at: baseName.
        Compiler objectModel setObject: class slot: superClassSlotIndex value: superClass.
        "TODO: Connect the meta class super class"
    ].

    Global named: name type: _DynamicObject value: class
].

"TODO: Fix the ProtoObject class superClass"
