"Magnitude"
Magnitude category: 'comparing' methods: {
:[max: aMagnitude
	"Answer the receiver or the argument, whichever has the greater
	magnitude."

	self > aMagnitude
		ifTrue: [^self]
		ifFalse: [^aMagnitude]
].

:[min: aMagnitude
	"Answer the receiver or the argument, whichever has the lesser
	magnitude."

	self < aMagnitude
		ifTrue: [^self]
		ifFalse: [^aMagnitude]
].

:[min: aMin max: aMax

	^ (self min: aMin) max: aMax
].

}.

Magnitude category: 'testing' methods: {
:[< aMagnitude
    self subclassResponsibility
].

:[<= aMagnitude
    ^ (self > aMagnitude) not
].

:[= aMagnitude
    self subclassResponsibility
].

:[> aMagnitude
    ^ aMagnitude < self
].

:[>= aMagnitude
    ^ aMagnitude <= self
].

:[isZero
	^self = 0
].
}.

"Object testing methods"
Object category: 'testing' methods: {
:[isFloat
    ^ false
].

:[isNumber
    ^ false
].

:[isInteger
    ^ false
].

:[isCharacter
    ^ false
].

}.

"Character"
Character class category: 'construction' methods: {
:[value: aCodePoint
    ^ (ObjectModel encodeCharacter #{aCodePoint castTo: UInt32}) reinterpretCastTo: _DynamicObject
]
}.

Character category: 'converting' methods: {
:[asInteger
    ^ (ObjectModel decodeCharacter #{self reinterpretCastTo: UIntPointer})
]
}.

Character category: 'converting' methods: {
:[asUppercase
    ($a <= self and: [$z <= self]) ifTrue: [
        ^ Character value: (self asInteger castTo: UInt32) - ($a castTo: UInt32) + ($A castTo: UInt32)
    ].

    ^ self
]
}.

Character category: 'testing' methods: {
:[< other
    ^ (self reinterpretCastTo: UIntPointer) < (other reinterpretCastTo: UIntPointer)
].

:[= other
    ^ self == other
].

:[> other
    ^ (self reinterpretCastTo: UIntPointer) > (other reinterpretCastTo: UIntPointer)
].

:[isCharacter
    ^ true
].

:[isVowel
	"Answer whether the receiver is one of the vowels, AEIOU, in upper or
	lower case."

	^'AEIOU' includes: self asUppercase
]
}.

"Number"
Number category: 'testing' methods: {
:[isNumber
    ^ true
].

}.

"Float"
Float category: 'testing' methods: {
:[isFloat
    ^ true
].

":[isZero
	^self = 0.0
]."
}.

"Integer"
Integer category: 'converting' methods: {
:[asInteger
    ^ self
]
}.

Integer category: 'testing' methods: {
:[isInteger
    ^ true
].

}.

Integer category: 'bit manipulation' methods: {
:[& aNumber
    ^ self bitAnd: aNumber
].

:[| aNumber
    ^ self bitOr: aNumber
].

}.

"SmallInteger"
SmallInteger category: 'arithmetic' methods: {
:[+ aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this + other
    ].

    ^ super + aNumber
].

:[- aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this - other
    ].

    ^ super - aNumber
].

:[* aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this * other
    ].

    ^ super * aNumber
].

:[/ aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        let remainder := this \\ other.
        remainder = 0 ifTrue: [
            ^ this // other
        ] ifFalse: [
            ^ (Fraction numerator: self denominator: aNumber) reduced
        ].
    ].

    ^ super / aNumber
].

:[// aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this // other
    ].

    ^ super // aNumber
].

:[\\ aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this \\ other
    ].

    ^ super \\ aNumber
].

}.

SmallInteger category: 'comparison' methods: {
:[= aNumber
    ^ self == aNumber
].

:[~ aNumber
    ^ self ~~ aNumber
].

:[< aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this < other
    ].

    ^ super < aNumber
].

:[<= aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this <= other
    ].

    ^ super <= aNumber
].

:[> aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this > other
    ].

    ^ super > aNumber
].

:[>= aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this >= other
    ].

    ^ super >= aNumber
].

}.

SmallInteger category: 'bit manipulation' methods: {
:[bitAnd: aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this & other
    ].

    ^ super bitAnd: aNumber
].

:[bitOr: aNumber
    ObjectModel isSmallInteger #{aNumber reinterpretCastTo: UIntPointer} ifTrue: [
        let this := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
        let other := ObjectModel decodeSmallInteger #{aNumber reinterpretCastTo: UIntPointer}.
        ^ this | other
    ].

    ^ super bitOr: aNumber
].

}.

SmallInteger category: 'printing' methods: {
:[printOn: aStream
	let buffer<LibC CChar array:64>.
	
	let value := ObjectModel decodeSmallInteger #{self reinterpretCastTo: UIntPointer}.
	LibC sprintf #{buffer. '%ld' . value}.
	let size := LibC strlen #{ buffer }.
	
	1 to: size do: [:i |
		let char := ObjectModel encodeCharacter #{buffer at: i}.
		aStream nextPut: (char reinterpretCastTo: _DynamicObject)
	]
	
].

}.
