"This is the definition of a reference refCounted object model."
Namespace named: #ObjectModel members: [
    Constant named: #DebugReferenceCounting type: BooleanBit value: false.

    Constant named: #OopSize type: UIntPointer value: UIntPointer size.

    OopSize = 4 ifTrue: [
        Constant named: #OopTagMask type: UIntPointer value: 3.
        Constant named: #OopTagShift type: UIntPointer value: 2.

        Constant named: #OopSmallIntegerTagMask type: UIntPointer value: 1.
        Constant named: #OopSmallIntegerTagValue type: UIntPointer value: 1.
        Constant named: #OopSmallIntegerShift type: UIntPointer value: 1.

        Constant named: #OopPointerTagMask type: UIntPointer value: OopTagMask.
        Constant named: #OopPointerTagValue type: UIntPointer value: 0.

        Constant named: #OopSizeShift type: UIntPointer value: 2.
        Constant named: #OopSizeMask type: UIntPointer value: -4.

        Compiler objectModel
            smallIntegerTagMask: OopSmallIntegerTagMask;
            smallIntegerTag: OopSmallIntegerTagValue;
            smallIntegerShift: OopSmallIntegerShift;
            yourself.
    ] ifFalse: [
        Constant named: #OopTagMask type: UIntPointer value: 7.
        Constant named: #OopTagShift type: UIntPointer value: 3.

        Constant named: #OopSmallIntegerTagMask type: UIntPointer value: OopTagMask.
        Constant named: #OopSmallIntegerTagValue type: UIntPointer value: 1.
        Constant named: #OopSmallIntegerShift type: UIntPointer value: OopTagShift.

        Constant named: #OopSmallFloatTagMask type: UIntPointer value: OopTagMask.
        Constant named: #OopSmallFloatTagValue type: UIntPointer value: 4.
        Constant named: #OopSmallFloatShift type: UIntPointer value: OopTagShift.

        Constant named: #OopPointerTagMask type: UIntPointer value: OopTagMask.
        Constant named: #OopPointerTagValue type: UIntPointer value: 0.

        Constant named: #OopSizeShift type: UIntPointer value: 3.
        Constant named: #OopSizeMask type: UIntPointer value: -8.

        Compiler objectModel
            smallIntegerTagMask: OopSmallIntegerTagMask;
            smallIntegerTag: OopSmallIntegerTagValue;
            smallIntegerShift: OopSmallIntegerShift;
            yourself.
    ].

    Constant named: #OopCharacterTagMask type: UIntPointer value: OopTagMask.
    Constant named: #OopCharacterTagValue type: UIntPointer value: 2.
    Constant named: #OopCharacterShift type: UIntPointer value: OopTagShift.

    Compiler objectModel
        characterTagMask: OopCharacterTagMask;
        characterTag: OopCharacterTagValue;
        characterShift: OopCharacterShift.

    Constant named: #isReferenceCounted value: true.

    Constant named: #IdentityHashShift value: 4.

    Constant named: #ObjectFormatEmpty value: 0.
    Constant named: #ObjectFormatFixedSize value: 1.
    Constant named: #ObjectFormatVariableSizeNoIVars value: 2.
    Constant named: #ObjectFormatVariableSizeWithIVars value: 3.
    Constant named: #ObjectFormatWeakVariableSize value: 4.
    Constant named: #ObjectFormatWeakFixedSize value: 5.
    Constant named: #ObjectFormatImmediate value: 7.
    Constant named: #ObjectFormatIndexable64 value: 9.
    Constant named: #ObjectFormatIndexable32 value: 10.
    Constant named: #ObjectFormatIndexable16 value: 12.
    Constant named: #ObjectFormatIndexable8 value: 16.
    Constant named: #ObjectFormatMixedObject value: 24.

    Constant named: #StaticOopFlag type: UInt8 value: 1.
    Global named: #ImmediateClassTable type: (ObjectHeader pointer array: 16).

    "The object header"
    Structure named: #ObjectHeader slots: {
        #classPointer => ObjectHeader pointer.
        #refCount => IntPointer.

        #identityHash => UInt16.
        #flags => UInt8.
        #format => UInt8.
        #slotCount => UInt32.
    }.

    Structure named: #ObjectVariableHeader slots: {
        #objectHeader => ObjectHeader.
        #name => _DynamicObject.
    }.

    Constant named: #isNonImmediateObject value: [<BooleanBit> :object<ObjectHeader pointer> |
        <cdecl>
        let oop := object reinterpretCastTo: UIntPointer.
        (oop & OopPointerTagMask) = OopPointerTagValue and: [object ~~ nil]
    ].

    Constant named: #isSmallInteger value: [<BooleanBit> :oop<UIntPointer> |
        <cdecl>
        (oop & OopSmallIntegerTagMask) = OopSmallIntegerTagValue
    ].

    Constant named: #decodeSmallInteger value: [<IntPointer> :oop<UIntPointer> |
        <cdecl>
        (oop reinterpretCastTo: IntPointer) >> OopSmallIntegerShift
    ].

    Constant named: #encodeSmallInteger value: [<UIntPointer> :value<IntPointer> |
        <cdecl>
        ((value << OopSmallIntegerShift) | OopSmallIntegerTagValue) reinterpretCastTo: UIntPointer
    ].

    OopSize = 4 ifTrue: [
        Constant named: #isSmallFloat value: [<BooleanBit> :oop<UIntPointer> |
            <cdecl>
            false
        ].

        Constant named: #decodeSmallFloat value: [<Float64> :oop<UIntPointer> |
            <cdecl>
            0.0
        ].

        Constant named: #encodeSmallFloat value: [<UIntPointer> :value<Float64> |
            <cdecl>
            0
        ].
    ] ifFalse: [
        "TODO: Implement this case"
        Constant named: #isSmallFloat value: [<BooleanBit> :oop<UIntPointer> |
            <cdecl>
            (oop & OopSmallFloatTagMask) = OopSmallFloatTagValue
        ].

        Constant named: #decodeSmallFloat value: [<Float64> :oop<UIntPointer> |
            <cdecl>
            0.0
        ].

        Constant named: #encodeSmallFloat value: [<UIntPointer> :value<Float64> |
            <cdecl>
            0
        ].
    ].

    Constant named: #isCharacter value: [<BooleanBit> :oop<UIntPointer> |
        <cdecl>
        (oop & OopCharacterTagMask) = OopCharacterTagValue
    ].

    Constant named: #decodeCharacter value: [<UIntPointer> :oop<UIntPointer> |
        <cdecl>
        (oop reinterpretCastTo: IntPointer) >> OopCharacterShift
    ].

    Constant named: #encodeCharacter value: [<UIntPointer> :value<UIntPointer> |
        <cdecl>
        (value << OopCharacterShift) | OopCharacterTagValue
    ].

    "Reference counting"
    DebugReferenceCounting ifTrue: [
        Constant named: #increaseReference value: [<Void> :object<ObjectHeader pointer> |
            <cdecl>
            isNonImmediateObject #{object} ifTrue: [
                let oldCount := object value refCount address fetchAndAdd: 1.
                "LibC printf #{c'Increase ref %p: %d\n' . object . oldCount}."
                (oldCount = 0 and: [(object value flags & StaticOopFlag) = 0]) ifTrue: [
                    LibC fprintf #{LibC stderr . c'Increasing Reference to destroyed object %p\n' . object}.
                    LibC abort #{}.
                ]
            ]
        ].

        Constant named: #releaseReference value: [<Void> :object<ObjectHeader pointer> |
            <cdecl>
            isNonImmediateObject #{object} ifTrue: [
                let oldCount := object value refCount address fetchAndAdd: -1.
                "LibC printf #{c'Release ref %p: %d\n' . object . oldCount}."
                oldCount <= 1 ifTrue: [
                    destroyObjectWithCount #{object . oldCount}
                ].
            ]
        ].

        Constant named: #finalizeAndDestroyObject value: [<Void> :object<ObjectHeader pointer> |
            <cdecl>
            finalizeObject #{object}.

            "Do not free the object memory in the debug mode"
        ].

        Constant named: #destroyObjectWithCount value: [<Void> :object<ObjectHeader pointer> :refCount<IntPointer> |
            <cdecl>
            (object value flags & StaticOopFlag) ~= 0 ifFalse: [
                refCount <= 0 ifTrue: [
                    LibC fprintf #{LibC stderr . c'Releasing destroyed object %p\n' . object}.
                    LibC abort #{}.
                ].

                finalizeAndDestroyObject #{object}
            ]
        ].

    ] ifFalse: [
        Constant named: #increaseReference value: [<Void> :object<ObjectHeader pointer> |
            <cdecl>
            isNonImmediateObject #{object} ifTrue: [
                object value refCount address fetchAndAdd: 1.
            ]
        ].

        Constant named: #releaseReference value: [<Void> :object<ObjectHeader pointer> |
            <cdecl>
            isNonImmediateObject #{object} ifTrue: [
                let oldCount := object value refCount address fetchAndAdd: -1.
                oldCount <= 1 ifTrue: [
                    destroyObject #{object}
                ].
            ]
        ].

        Constant named: #finalizeAndDestroyObject value: [<Void> :object<ObjectHeader pointer> |
            <cdecl>
            "Finalize the object"
            finalizeObject #{object}.

            "Free the object"
            LibC free #{object}
        ].

        Constant named: #destroyObject value: [<Void> :object<ObjectHeader pointer> |
            <cdecl>
            (object value flags & StaticOopFlag) ~= 0 ifFalse: [
                finalizeAndDestroyObject #{object}.
            ]
        ].
    ].

    Constant named: #releaseSlotReference value: [<Void> :object<ObjectHeader pointer> |
        <cdecl>
        <localReturn>
        "LibC printf #{c'slot %p\n' . object}."
        releaseReference #{object}.
    ].

    Constant named: #invokeObjectFinalize value: [<Void> :object<ObjectHeader pointer> |
        <cdecl>
        <localReturn>
        object value refCount := 1.
        let dynObject := object reinterpretCastTo: _DynamicObject.
        dynObject finalize.
    ].

    Constant named: #finalizeObject value: [<Void> :object<ObjectHeader pointer> |
        <cdecl>
        <localReturn>
        "Call the object finalizer"
        "LibC printf #{c'invokeObjectFinalize [%p]%p\n' . object value classPointer . object}."
        invokeObjectFinalize #{object}.

        "Decrease the finalized count again to remove the artificial reference.
        If the new count is greater than 1, then we have a zombie that is still alive ;)."
        let finalizedCount := object value refCount address fetchAndAdd: -1.
        finalizedCount > 1 ifTrue: [
            ^ nil
        ].

        "Release the references of the objects"
        let format := object value format.
        let oopSlotCount<UInt32> := 0.
        format <= ObjectFormatVariableSizeWithIVars ifTrue: [
            oopSlotCount := object value slotCount.
        ] ifFalse: [
            format >= ObjectFormatMixedObject ifTrue: [
                oopSlotCount := object value slotCount & 16rFFFF.
            ]
        ].
        oopSlotCount > 16rFFFF ifTrue: [
            (nil castTo: UIntPointer pointer) value := 0.
            nil
        ].

        "LibC printf #{c'destroyObject [%p]%p with format %d and %p slots\n' . object value classPointer . object . format . oopSlotCount}."

        let slots := (object atOffset: 1) address reinterpretCastTo: ObjectHeader pointer pointer.
        1 to: oopSlotCount do: [:i |
            let slot := slots at: i.
            "LibC printf #{c'slot %d:%d [%p]%p\n' . i . oopSlotCount . (slots at: i) address. slot}."
            releaseSlotReference #{slot}.
        ].
        "LibC printf #{c'destroyObject [%p]%p done.\n' . object value classPointer . object}."

    ].

    Constant named: #writeBarrier value: [<Void> :value<ObjectHeader pointer> :variable<ObjectHeader pointer pointer> |
        <cdecl>
        increaseReference #{value}.
        releaseReference #{variable swapValue: value}.
    ].

    Constant named: #writeBarrierNoIncrement value: [<Void> :value<ObjectHeader pointer> :variable<ObjectHeader pointer pointer> |
        <cdecl>
        releaseReference #{variable swapValue: value}.
    ].

    Constant named: #getPointersBasicSize value: [<UIntPointer> :object<ObjectHeader pointer> |
        <cdecl>
        object value slotCount
    ].

    Constant named: #getIdentityHash value: [<UIntPointer> :object<ObjectHeader pointer> |
        <cdecl>
        object value identityHash
    ].

"
newObjectHeaderWithWeakPointers
newObjectHeaderWithWords
"

    Constant named: #newObjectHeaderWithPointers value: [<ObjectHeader> :slotCount<UInt32> |
        <cdecl>
        ObjectHeader new
            slotCount: slotCount;
            flags: StaticOopFlag;
            format: ((slotCount > 0 ifTrue: [ObjectFormatFixedSize] ifFalse: [ObjectFormatEmpty]) castTo: UInt8);
            yourself
    ].

    Constant named: #newObjectHeaderWithBytes value: [<ObjectHeader> :slotCount<UInt32> |
        <cdecl>
        ObjectHeader new
            slotCount: ((slotCount + OopSize - 1) // OopSize castTo: UInt32);
            flags: StaticOopFlag;
            format: (ObjectFormatIndexable8 + ( (OopSize - slotCount) \\ OopSize) castTo: UInt8);
            yourself
    ].

    Constant named: #getBytesObjectSize value: [<UIntPointer> :object<ObjectHeader pointer> |
        <cdecl>
        (object value slotCount * OopSize) - (object value format - ObjectFormatIndexable8)
    ].

    Constant named: #getFirstFixedFieldPointer value: [<Void pointer> :object<ObjectHeader pointer> |
        <cdecl>
        (object reinterpretCastTo: UIntPointer) + ObjectHeader size reinterpretCastTo: Void pointer
    ].

    Constant named: #setObjectClass value: [<Void> :header<ObjectHeader pointer> :classPointer <ObjectHeader pointer> |
        <cdecl>
        header value classPointer: classPointer
    ].

    Constant named: #getObjectClass value: [<ObjectHeader pointer> :header<ObjectHeader pointer> |
        <cdecl>

        let oopValue := header reinterpretCastTo: UIntPointer.
        let oopTag := oopValue & OopTagMask.
        (oopTag ~= 0 or: [header == nil]) ifTrue: [
            ImmediateClassTable atOffset: oopTag
        ] ifFalse: [
            header value classPointer
        ]
    ].

    Constant named: #setIdentityHash value: [<Void> :header<ObjectHeader pointer> :newIdentityHash<UIntPointer> |
        <cdecl>
        header value identityHash: (newIdentityHash castTo: UInt16)
    ].

    Constant named: #truncateIdentityHash value: [<UIntPointer> :rawIdentityHash<UIntPointer> |
        <cdecl>
        rawIdentityHash bitAnd: 16rFFFF
    ].

    Constant named: #createFormatSpec value: [:instanceSpec<UInt32> :instanceSize<UInt32> |
        <cdecl>
        (instanceSpec << 16) | instanceSize
    ].

    Constant named: #createNamedFormatSpec value: [:type :instanceSize<UInt32> |
        <cdecl>
        <localReturn>
        type == #pointers ifTrue: [
            ^ createFormatSpec #{instanceSize == 0 ifTrue: [ ObjectFormatEmpty ] ifFalse: [ ObjectFormatFixedSize] . instanceSize }
        ].
        type == #variablePointers ifTrue: [
            ^ createFormatSpec #{instanceSize == 0 ifTrue: [ ObjectFormatVariableSizeNoIVars ] ifFalse: [ ObjectFormatVariableSizeWithIVars ] . instanceSize}
        ].
        type == #variableWeakPointers ifTrue: [
            ^ createFormatSpec #{ObjectFormatWeakVariableSize . 0 }
        ].
        type == #immediate ifTrue: [
            ^ createFormatSpec #{ObjectFormatImmediate . 0 }
        ].
        type == #words ifTrue: [
            ^ createFormatSpec #{ObjectFormatIndexable32 . 0 }
        ].
        type == #bytes ifTrue: [
            ^ createFormatSpec #{ObjectFormatIndexable8 . 0 }
        ].
        type == #mixedObject ifTrue: [
            ^ createFormatSpec #{ObjectFormatMixedObject . 0 }
        ].

        Compiler compileError: 'Unsupported object type {1}' format: {type}.
        ^ nil
    ].

    Constant named: #getTypeNameFromFormatSpec value: [:formatSpec<UInt32> |
        <localReturn>
        let format := formatSpec >> 16.
        (format = ObjectFormatEmpty or: [format = ObjectFormatFixedSize]) ifTrue: [
            ^ #pointers
        ].
        (format = ObjectFormatVariableSizeNoIVars or: [format = ObjectFormatVariableSizeNoIVars]) ifTrue: [
            ^ #variablePointers
        ].
        format = ObjectFormatVariableSizeNoIVars  ifTrue: [
            ^ #variablePointers
        ].

        format = ObjectFormatWeakVariableSize  ifTrue: [
            ^ #variableWeakPointers
        ].

        format = ObjectFormatImmediate  ifTrue: [
            ^ #immediate
        ].

        format = ObjectFormatIndexable32  ifTrue: [
            ^ #words
        ].

        format = ObjectFormatIndexable16  ifTrue: [
            ^ #shorts
        ].

        format = ObjectFormatIndexable8  ifTrue: [
            ^ #bytes
        ].

        format = ObjectFormatMixedObject  ifTrue: [
            ^ #mixedObject
        ].

        ^ nil
    ].

    Constant named: #basicNewVariable value: [<ObjectHeader pointer> :class<ObjectHeader pointer> :formatOop<UIntPointer> :variableSizeOop<UIntPointer> |
        <cdecl>
        <localReturn>
        isSmallInteger #{formatOop} ifFalse: [
            ^ nil
        ].

        isSmallInteger #{variableSizeOop} ifFalse: [
            ^ nil
        ].

        let formatSpec := decodeSmallInteger #{formatOop}.
        let variableSize := decodeSmallInteger #{variableSizeOop}.

        let format := formatSpec >> 16.
        let fixedSize := formatSpec & 16rFFFF.

        let completeSize := fixedSize + variableSize.

        "TODO: Replace this with a lookup table"
        let displayedSlotSize<UIntPointer> := 0.
        format >= ObjectFormatIndexable64 ifTrue: [
            format >= ObjectFormatIndexable16 ifTrue: [
                format >= ObjectFormatIndexable8 ifTrue: [
                    displayedSlotSize := 1
                ] ifFalse: [
                    displayedSlotSize := 2
                ]
            ] ifFalse: [
                format >= ObjectFormatIndexable32 ifTrue: [
                    displayedSlotSize := 4
                ] ifFalse: [
                    displayedSlotSize := 8
                ]
            ]
        ] ifFalse: [
            displayedSlotSize := UIntPointer size
        ].

        "LibC printf #{c'basicNew format %d fixedSize %d variableSize %d displayedSlotSize %p \n' . format . fixedSize . variableSize . displayedSlotSize}."

        let bodySize := completeSize * displayedSlotSize.
        let instanceFormat<UInt8> := 0.
        let slotCount<UIntPointer> := 0.
        displayedSlotSize < UIntPointer size ifTrue: [
            slotCount := (bodySize + OopSize - 1) // OopSize.

            let fieldsPerSlot := OopSize // displayedSlotSize.
            instanceFormat := format + ((fieldsPerSlot - bodySize) \\ fieldsPerSlot) castTo: UInt8.
        ] ifFalse: [
            slotCount := bodySize // OopSize.
            instanceFormat := format castTo: UInt8
        ].

        "LibC printf #{c'slotCount %d instanceFormat: %d\n' . slotCount . instanceFormat}."

        let objectSize := ObjectHeader size + (slotCount * OopSize).
        let result := LibC malloc #{objectSize} reinterpretCastTo: ObjectHeader pointer.
        LibC memset #{result . 0 . objectSize}.

        result value
            classPointer: class;
            identityHash: ((result reinterpretCastTo: UIntPointer) >> IdentityHashShift castTo: UInt16);
            slotCount: (slotCount castTo: UInt32);
            refCount: 1;
            format: instanceFormat;
            yourself.

        "LibC printf #{c'result slotCount %d -> %d instanceFormat: %d\n' . slotCount . result value slotCount . result value format}."
        ^ result
    ].

    Constant named: #basicNewBytes value: [<ObjectHeader pointer> :class<ObjectHeader pointer> :bytesCount<UIntPointer> |
        <cdecl>
        <localReturn>

        let slotCount<UIntPointer> := (bytesCount + OopSize - 1) // OopSize.
        let instanceFormat<UInt8> := (ObjectFormatIndexable8 + ((OopSize - bytesCount) \\ OopSize)) castTo: UInt8.

        let objectSize := ObjectHeader size + (slotCount * OopSize).
        let result := LibC malloc #{objectSize} reinterpretCastTo: ObjectHeader pointer.
        LibC memset #{result . 0 . objectSize}.

        result value
            classPointer: class;
            identityHash: ((result reinterpretCastTo: UIntPointer) >> IdentityHashShift castTo: UInt16);
            slotCount: (slotCount castTo: UInt32);
            refCount: 1;
            format: instanceFormat;
            yourself.

        ^ result
    ].

    Constant named: #basicNewMixedBytes value: [<ObjectHeader pointer> :class<ObjectHeader pointer> :dynamicObjectCount<UIntPointer> :bytesCount<UIntPointer> |
        <cdecl>
        <localReturn>

        let totalSize<UIntPointer> := dynamicObjectCount * OopSize + bytesCount.
        let slotCount<UIntPointer> := (totalSize + OopSize - 1) // OopSize.
        let instanceFormat<UInt8> := (ObjectFormatMixedObject + ((OopSize - totalSize) \\ OopSize)) castTo: UInt8.

        let objectSize := ObjectHeader size + (slotCount * OopSize).
        let result := LibC malloc #{objectSize} reinterpretCastTo: ObjectHeader pointer.
        LibC memset #{result . 0 . objectSize}.

        result value
            classPointer: class;
            identityHash: ((result reinterpretCastTo: UIntPointer) >> IdentityHashShift castTo: UInt16);
            slotCount: ((slotCount << 16) | dynamicObjectCount castTo: UInt32);
            refCount: 1;
            format: instanceFormat;
            yourself.

        ^ result
    ].

    Constant named: #basicNewFixed value: [<ObjectHeader pointer> :class<ObjectHeader pointer> :formatOop<UIntPointer> |
        <cdecl>
        <localReturn>
        ^ basicNewVariable #{class . formatOop . 1}
    ].

    Constant named: #getObjectSize value: [<UIntPointer> :object<ObjectHeader pointer> |
        <localReturn>
        isNonImmediateObject #{object} ifFalse: [^ 0].

        let slotCount := object value slotCount.
        let format := object value format.
        OopSize = 4 ifTrue: [
            format < ObjectFormatIndexable64 ifTrue: [ ^ slotCount].
            format = ObjectFormatIndexable64 ifTrue: [ ^ slotCount // 2].
        ] ifFalse:[
            format <= ObjectFormatIndexable64 ifTrue: [ ^ slotCount].
        ].

        format >= ObjectFormatIndexable8 ifTrue: [ ^ (slotCount * OopSize) - (format - ObjectFormatIndexable8)].
        format >= ObjectFormatIndexable16 ifTrue: [ ^ (slotCount * (OopSize // 2)) - (format - ObjectFormatIndexable16)].
        ^ (slotCount * (OopSize // 4)) - (format - ObjectFormatIndexable32)
    ].

    Constant named: #getObjectIndexableSize value: [<UIntPointer> :object<ObjectHeader pointer> |
        <localReturn>
        isNonImmediateObject #{object} ifFalse: [^ 0].
        let result := getObjectSize #{object}.
        let format := object value format.
        ^ result
    ].

    Constant named: #uncheckedIndexableBasicAt value: [<ObjectHeader pointer> :object<ObjectHeader pointer> :index<UIntPointer> |
        <localReturn>
        isNonImmediateObject #{object} ifFalse: [ ^ nil].

        let format := object value format.
        let firstSlot := (object at: 2) address reinterpretCastTo: ObjectHeader pointer pointer.
        format < ObjectFormatIndexable64 ifTrue: [
            let result := firstSlot at: index.
            increaseReference #{result}.
            ^ result
        ].

        format >= ObjectFormatIndexable8 ifTrue: [
            let bytes := firstSlot reinterpretCastTo: UInt8 pointer.
            ^ encodeSmallInteger #{bytes at: index} reinterpretCastTo: ObjectHeader pointer
        ].

        format >= ObjectFormatIndexable16 ifTrue: [
            let shorts := firstSlot reinterpretCastTo: UInt16 pointer.
            ^ encodeSmallInteger #{shorts at: index} reinterpretCastTo: ObjectHeader pointer
        ].

        format >= ObjectFormatIndexable32 ifTrue: [
            let words := firstSlot reinterpretCastTo: UInt32 pointer.
            ^ encodeSmallInteger #{words at: index} reinterpretCastTo: ObjectHeader pointer
        ].

        ^ nil
    ].

    Constant named: #uncheckedIndexableBasicAtPut value: [<Void> :object<ObjectHeader pointer> :index<UIntPointer> :value<ObjectHeader pointer>|
        <localReturn>
        isNonImmediateObject #{object} ifFalse: [ ^ nil ].

        let format := object value format.
        let firstSlot := (object at: 2) address reinterpretCastTo: ObjectHeader pointer pointer.
        format < ObjectFormatIndexable64 ifTrue: [
            writeBarrier #{value . (firstSlot at: index) address}.
            ^ nil
        ].

        format >= ObjectFormatIndexable8 ifTrue: [
            let bytes := firstSlot reinterpretCastTo: UInt8 pointer.
            (bytes at: index) := decodeSmallInteger #{value reinterpretCastTo: UIntPointer} castTo: UInt8
        ].

        format >= ObjectFormatIndexable16 ifTrue: [
            let shorts := firstSlot reinterpretCastTo: UInt16 pointer.
            (shorts at: index) := decodeSmallInteger #{value reinterpretCastTo: UIntPointer} castTo: Int16
        ].

        format >= ObjectFormatIndexable32 ifTrue: [
            let words := firstSlot reinterpretCastTo: UInt32 pointer.
            (words at: index) := decodeSmallInteger #{value reinterpretCastTo: UIntPointer} castTo: Int32
        ].

        "format = ObjectFormatIndexable64"
        "let qwords := firstSlot reinterpretCastTo: UInt64 pointer.
        (qwords at: index) := decodeSmallInteger #{value reinterpretCastTo: UIntPointer}."
    ].

    Constant named: #registerClass value: [<Void> :object<ObjectHeader pointer> |
    ].

    Compiler objectModel
    	headerType: ObjectModel ObjectHeader;
    	writeBarrier: (ObjectModel associationAt: #writeBarrier);
    	writeBarrierNoIncrement: (ObjectModel associationAt: #writeBarrierNoIncrement);
        increaseReference: (ObjectModel associationAt: #increaseReference);
        releaseReference: (ObjectModel associationAt: #releaseReference);
        newObjectHeaderWithPointers: newObjectHeaderWithPointers;
        newObjectHeaderWithBytes: newObjectHeaderWithBytes;
        setIdentityHashFunction: setIdentityHash;
        truncateIdentityHashFunction: truncateIdentityHash;

        setObjectClassFunction: [<Void> :header<ObjectHeader pointer> :classPointer <ObjectHeader pointer> |
            header value classPointer: classPointer
        ];
        getObjectClassFunction: [<ObjectHeader pointer> :header<ObjectHeader pointer> |
            header value classPointer
        ];

        objectVariableHeaderCreationFunction: [<ObjectVariableHeader> :variableClass<ObjectHeader pointer> :name |
            ObjectVariableHeader new
                objectHeader: (newObjectHeaderWithPointers #{2}
                    classPointer: variableClass;
                    yourself
                );
                name: name;
                yourself
        ];
        yourself

]
