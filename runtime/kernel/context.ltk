let ContextStackMetadataElementCount<IntPointer> := 4.

let SignedPointerSize<IntPointer> := UIntPointer size castTo: IntPointer.
let ContextCompiledMethodPointerOffset<IntPointer> := -1 * UIntPointer size castTo: IntPointer.
let ContextMarriedContextPointerOffset<IntPointer> := -2 * UIntPointer size castTo: IntPointer.
let ContextArgumentDescriptorOffset<IntPointer> := -3 * UIntPointer size castTo: IntPointer.
let ContextStackDescriptorOffset<IntPointer> := -4 * UIntPointer size castTo: IntPointer.

let contextFixedFields := InstructionStream instanceVariables size + Context instanceVariables size castTo: UInt32.

let EnsurePrimitiveNumber<UIntPointer> := ObjectModel encodeSmallInteger #{198}.

Namespace named: #ObjectModel members: [

Structure named: #ContextHeader slots: {
    #objectHeader => ObjectHeader.
    #sender => UIntPointer.
    #pc => UIntPointer.
    #stackp => UIntPointer.
    #method => UIntPointer.
    #closureOrNil => UIntPointer.
    #argumentDescriptor => UIntPointer.
    #stackFrameDescriptor => UIntPointer.
}.

let argumentsStartOffset<IntPointer> := "Previous frame pointer - Return pointer" UIntPointer size * 2 castTo: IntPointer. "TODO: Add space for a link register if needed."

Compiler staticAssert: (ContextHeader size - ObjectHeader size) = (contextFixedFields * UIntPointer size).

Constant named: #marryThisContext value: [<ContextHeader pointer> :framePointer<UInt8 pointer> |
    <localReturn>
    <cdecl>
    let marriedContextPointer := (framePointer atOffset: ContextMarriedContextPointerOffset) address reinterpretCastTo: ContextHeader pointer pointer.
    "LibC printf #{c'fp %p marryThisContext %p\n' . framePointer . marriedContextPointer}."

    let previousContext := marriedContextPointer value.
    previousContext ifNotNil: [
        LibC printf #{c'Previous context %p\n' . previousContext}.
        ObjectModel increaseReference #{previousContext reinterpretCastTo: ObjectModel ObjectHeader pointer}.
        ^ previousContext
    ].

    "Compute the other pointers"
    let methodPointer := (framePointer atOffset: ContextCompiledMethodPointerOffset) address reinterpretCastTo: UIntPointer pointer.
    let argumentDescriptorPointer := (framePointer atOffset: ContextArgumentDescriptorOffset) address reinterpretCastTo: UIntPointer pointer.
    let stackDescriptorPointer := (framePointer atOffset: ContextStackDescriptorOffset) address reinterpretCastTo: UIntPointer pointer.

    let argumentDescriptor := argumentDescriptorPointer value.
    let stackDescriptor := stackDescriptorPointer value.

    "LibC printf #{c'Marry thisContext: %p, argumentDesc %p, stack frame descriptor %p\n' . framePointer . argumentDescriptor . stackDescriptor}."
    "LibC printf #{c'Compiled method %p\n' . methodPointer value}."

    "Decode the argument descriptor"
    let oopArgumentCount := argumentDescriptor & 16rff.
    let nativeArgumentsSize := (argumentDescriptor >> 8) & 16rffff.

    "Decode the stack descriptor"
    let localFrameSize := stackDescriptor >> 16.
    let dynamicLocalCount := stackDescriptor & 4095.

    "LibC printf #{c'Oop argument count: %d native arguments size: %d\n' . oopArgumentCount . nativeArgumentsSize}.
    LibC printf #{c'Local frame size: %d dynobject count: %d\n' . localFrameSize . dynamicLocalCount}."

    let oopCount := contextFixedFields + oopArgumentCount + dynamicLocalCount.
    let nativeSize := nativeArgumentsSize + localFrameSize - (dynamicLocalCount * UIntPointer size).

    "LibC printf #{c'Oop count: %d Native size: %d\n' . oopCount . nativeSize}."

    "Instantiate the context object"
    let contextObject := basicNewMixedBytes #{Context reinterpretCastTo: ObjectHeader pointer . oopCount . nativeSize}.
    let context := contextObject reinterpretCastTo: ContextHeader pointer.
    "LibC printf #{c'Allocated context %p\n' . context}."

    "Store the context in the stack"
    marriedContextPointer value := context.
    "LibC printf #{c'Stored context %p at %p\n' . marriedContextPointer value . marriedContextPointer}."
    context value sender: (framePointer reinterpretCastTo: UIntPointer) + 1.

    "Store the descriptors in the context."
    context value
        argumentDescriptor: encodeSmallInteger #{argumentDescriptor};
        stackFrameDescriptor: encodeSmallInteger #{stackDescriptor};
        method: methodPointer value.

    "Get pointers to the beginning of the data"
    let dataStart := ObjectModel getFirstFixedFieldPointer #{contextObject} reinterpretCastTo: UIntPointer pointer.
    let oopDataStart := (dataStart atOffset: contextFixedFields) address.
    let nativeDataStart := (dataStart atOffset: oopCount) address reinterpretCastTo: UInt8 pointer .

    "Get the argument data pointers"
    let argumentsOopStart := (framePointer atOffset: argumentsStartOffset) address reinterpretCastTo: UIntPointer pointer.
    let argumentsNativeStart := (argumentsOopStart atOffset: oopArgumentCount) address reinterpretCastTo: UInt8 pointer.

    "Copy the arguments"
    ObjectModel isReferenceCounted ifTrue: [
        1 to: oopArgumentCount do: [:i |
            let argument := argumentsOopStart at: i.
            ObjectModel increaseReference #{argument reinterpretCastTo: ObjectModel ObjectHeader pointer}.
            oopDataStart at: i put: argument
        ].
        nil
    ] ifFalse: [
        LibC memcpy #{oopDataStart . argumentsOopStart . oopArgumentCount * UIntPointer size }.
        nil
    ].

    LibC memcpy #{nativeDataStart . argumentsNativeStart . nativeArgumentsSize}.

    ObjectModel increaseReference #{context reinterpretCastTo: ObjectModel ObjectHeader pointer}.
    ^ context
].

Constant named: #widowThisContext value: [<Void> :framePointer<UInt8 pointer> |
    <localReturn>
    <cdecl>
    let marriedContextPointer := (framePointer atOffset: ContextMarriedContextPointerOffset) address reinterpretCastTo: ContextHeader pointer pointer.
    "LibC printf #{c'fp %p marriedContextPointer %p\n' . framePointer . marriedContextPointer}."

    let marriedContext := marriedContextPointer value.

    marriedContext ifNil: [ ^ nil ].
    "LibC printf #{c'Old married context %p at %p\n' . marriedContext . marriedContextPointer}."
    marriedContext value sender: 0.

    "TODO: Copy the temporaries into the context, etc"

    "Release the context reference"
    ObjectModel releaseReference #{marriedContext reinterpretCastTo: ObjectModel ObjectHeader pointer}.
    ^ nil
].

Constant named: #nonLocalReturnCannotReturnError value: [<Void> |
    <localReturn>
    <inline: #never>
    BlockCannotReturn new signal: 'Cannot perform non local return.'.
].

Constant named: #nonLocalReturnCannotReturnToLower value: [<Void> |
    <localReturn>
    <inline: #never>
    BlockCannotReturn new signal: 'Cannot perform non local return to lower context'.
].

Constant named: #cleanFrameForUnwinding value: [<Void> :framePointer<UIntPointer> |
    "LibC printf #{c'Clean frame for unwinding %p\n' . framePointer}."

    let compiledMethodPointer := (framePointer + ContextCompiledMethodPointerOffset) reinterpretCastTo: _CompiledMethod pointer pointer.
    let compiledMethod := compiledMethodPointer value.
    let primitive := compiledMethod value primitive.

    let argumentDescriptorPointer := (framePointer + ContextArgumentDescriptorOffset) reinterpretCastTo: UIntPointer pointer.
    let argumentDescriptor := argumentDescriptorPointer value.

    let stackDescriptorPointer := (framePointer + ContextStackDescriptorOffset) reinterpretCastTo: UIntPointer pointer.
    let stackDescriptor := stackDescriptorPointer value.

    "LibC printf #{c'Compiled method %p primitive: %p argument descriptor: %p stack descriptor: %p\n' . compiledMethod . primitive . argumentDescriptor . stackDescriptor}."

    let registersToPreserve := (stackDescriptor >> 12) & 15.
    let oopLocals := stackDescriptor & 4095.

    "LibC printf #{c'Registers %p ooplocals %p \n' . registersToPreserve . oopLocals}."

    primitive == EnsurePrimitiveNumber ifTrue: [
        "ensure:/ifCurtailed:"
        LibC printf #{c'TODO: Process #ensure:/#ifCurtailed:\n'}.
    ].

    widowThisContext #{framePointer reinterpretCastTo: UInt8 pointer}.

    let localsBase := framePointer - ((ContextStackMetadataElementCount + registersToPreserve) * SignedPointerSize).
    1 to: oopLocals do: [:i |
        let localPointer := localsBase - (i*SignedPointerSize) reinterpretCastTo: ObjectHeader pointer pointer.
        let localValue := localPointer value.
        "LibC printf #{c'Frame %p Local %p at %p: %p\n' . framePointer . i .localPointer . localValue}."

        releaseReference #{localValue}.
        localPointer value := nil.
    ].
].

Constant named: #nonLocalReturn value: [<Void> :targetContext<ContextHeader pointer> :returnValue<Void pointer> |
    <localReturn>

    "LibC printf #{c'Non-local return target %p value %p\n' . targetContext . returnValue}."

    let target := targetContext value sender.
    isSmallInteger #{target} ifFalse: [
        nonLocalReturnCannotReturnError #{}
    ].

    let targetFramePointer := target - 1 reinterpretCastTo: UIntPointer.
    let currentFramePointer := thisContext uncheckedFramePointer reinterpretCastTo: UIntPointer.
    targetFramePointer <= currentFramePointer ifTrue: [
        nonLocalReturnCannotReturnToLower #{}
    ].

    "Unwind the context"
    "LibC printf #{c'Start context %p\n' . currentFramePointer}."
    let unwindPosition := (currentFramePointer reinterpretCastTo: UIntPointer pointer) value.
    [ unwindPosition ~~ targetFramePointer ] whileTrue: [
        cleanFrameForUnwinding #{unwindPosition}.
        unwindPosition := (unwindPosition reinterpretCastTo: UIntPointer pointer) value
    ].

    "Return from here"
    let targetMethod := targetContext value method reinterpretCastTo: _CompiledMethod pointer.
    let targetMethodExitPoint := targetMethod value exitPoint - 1 reinterpretCastTo: Void pointer.

    "Clean the target method. This can destroy the target context."
    cleanFrameForUnwinding #{unwindPosition}.

    "LibC printf #{c'Non-local return to %p from %p\n' . targetFramePointer . currentFramePointer}."

    "LibC printf #{c'Target exit point %p\n' . targetMethodExitPoint}."
    thisContext uncheckedReturnFromFrame: (targetFramePointer reinterpretCastTo: Void pointer) value: returnValue exitPoint: targetMethodExitPoint.

    "This should be unreachable"
    LibC abort #{}.
    ^ nil
].

Compiler objectModel
    marryThisContextFunction: marryThisContext;
    widowThisContextFunction: widowThisContext;
    nonLocalReturnFunction: nonLocalReturn;
    yourself.
].

Context category: 'accessing' methods: {
:[sender
    let senderValue := sender reinterpretCastTo: UIntPointer.
    ObjectModel isSmallInteger #{senderValue} ifFalse: [
        ^ sender
    ].

    "Function without a calling convention that mandates the presence of a
    context require a special handling."
    argumentDescriptor & (1<<29) ~~ 0 ifTrue: [
        "TODO: Support smalltalk -> cdecl .... cdecl -> smalltalk traversal"
        ^ nil
    ].

    let framePointer := senderValue - 1 reinterpretCastTo: UInt8 pointer pointer.
    let parentFramePointer := framePointer value.
    "LibC printf #{c'Parent frame pointer: %p\n' . parentFramePointer}."
    ^ ObjectModel marryThisContext #{parentFramePointer} reinterpretCastTo: _DynamicObject.
].

:[method
    ^ method
].

:[selector
    ^ method selector
].

}.

Context category: 'accessing' methods: {
:[argumentAt: index
    (1<= index and: [index <= self objectArgumentCount]) ifFalse: [
        self errorSubscriptBounds: index
    ].

    let selfFields := self firstFixedFieldPointerOfType: UIntPointer pointer.
    let argumentIndex := (index castTo: IntPointer) + contextFixedFields - 1.
    ^ (selfFields atOffset: argumentIndex) reinterpretCastTo: _DynamicObject
].

:[objectArgumentCount
    ^ argumentDescriptor & 16rff
].

:[receiver
    ^ self objectArgumentCount > 0 ifTrue: [self argumentAt: 1] ifFalse: [nil]
]

}.

Context category: 'closure support' methods: {
:[asContext
    ^ self
].
:[contextTag
	"Context tags may be used for referring to contexts instead of contexts themselves as they can be copied and will continue to work in other processes (continuations). By default, we use the context itself to as its tag."
	^self
].

}.

Context category: 'query' methods: {
:[findContextSuchThat: testBlock
	"Search self and my sender chain for first one that satisfies testBlock.  Return nil if none satisfy"

	| context |
	context := self.
	[ context isNil ] whileFalse: [
		(testBlock value: context)
			ifTrue: [ ^ context ].
		context := context sender ].
	^ nil
].

}.
