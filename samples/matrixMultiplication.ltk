Class <<< #LTMatrix
	slots: {
        #rows => UInt32.
        #columns => UInt32.
        #data => (Float64 array)
	};
	package: 'Lowtalk-Samples'.

LTMatrix class category: 'construction' methods: {
:[rows: rows columns: columns -> _SelfInstanceType.
    ^ (self basicNew: rows*columns*8)
		initializeWithRows: rows columns: columns;
		yourself
]
}.

LTMatrix category: 'initialization' methods: {
:[initializeWithRows: numberOfRows columns: numberOfColumns
	self assert: (numberOfRows ~= 0 and: [numberOfColumns ~= 0]).

    rows := (numberOfRows castTo: UInt32).
    columns := (numberOfColumns castTo: UInt32).
]
}.

LTMatrix category: 'accessing' methods: {
:[at: row at: column put: value
    let index := ((row castTo: UInt32) - 1) * columns + (column castTo: UInt32).

    (data at: index) := value castTo: Float64.
].

:[rows
	^ rows
].

:[columns
	^ columns
].
}.


LTMatrix category: 'arithmetic' methods: {
:[+ <_SelfType>other

    (rows ~~ other __private rows or: [columns ~~ other __private rows]) ifTrue: [
        self error: 'Cannot add matrices with different dimensions.'
    ].

    let elementCount := rows * columns.
    let result := self class rows: rows columns: columns.

    let left := (data at: 1) address.
    let right := (other __private data at: 1) address.
    let dest := (result __private data at: 1) address.

    1 to: elementCount do: [:i |
        (dest at: i) := (left at: i) + (right at: i)
    ].

    ^ result
].

:[- <_SelfType>other

    (rows ~~ other __private rows or: [columns ~~ other __private rows]) ifTrue: [
        self error: 'Cannot subtract matrices with different dimensions.'
    ].

    let elementCount := rows * columns.
    let result := self class rows: rows columns: columns.

    let left := (data at: 1) address.
    let right := (other __private data at: 1) address.
    let dest := (result __private data at: 1) address.

    1 to: elementCount do: [:i |
        (dest at: i) := (left at: i) - (right at: i)
    ].

    ^ result
].

:[* otherMatrixOrScalar
    ^ otherMatrixOrScalar isNumber ifTrue: [ self timesScalar: otherMatrixOrScalar ] ifFalse: [ self timesMatrix: (otherMatrixOrScalar castTo: _SelfType)]
].

:[timesScalar: aScalar
    let result := self class rows: rows columns: columns.
    let factor := aScalar castTo: Float64.

    let elementCount := rows * columns.
    1 to: elementCount do: [:i |
        (result __private data at: i) := (data at: i) * factor
    ].

    ^ result
].

:[timesMatrix: <_SelfType>other
    (columns ~~ other __private rows) ifTrue: [
        self error: 'Cannot perform matrix multiplication.'
    ].

    let result := self class rows: rows columns: columns.
    let iterations := columns - 1.

    let left := (data at: 1) address.
    let right := (other __private data at: 1) address.
    let dest := (result __private data at: 1) address.

    let leftPitch := columns.
    let rightPitch := other __private columns.

    let destIndex := 0.
    0 to: rows - 1 do: [:i |
        0 to: columns - 1 do: [:j |
            let sum<Float64> := 0.0.
            0 to: iterations do: [:k |
                sum := sum + ((left atOffset: (i*leftPitch + k)) * (right atOffset: (k*rightPitch + j) ))
            ].
            dest atOffset: destIndex put: sum.
            destIndex := destIndex + 1.
        ].
    ].

    ^ result
].

}.

LTMatrix category: 'printing' methods: {
:[printOn: aStream
    aStream nextPutAll: 'LTMatrix rows: '; print: rows;
        nextPutAll: ' columns: '; print: columns;
        nextPutAll: ' content: #('; lf.

    let index := 0.
    1 to: rows do: [:r |
        1 to: columns do: [:c |
            aStream print: (data atOffset: index); space.
            index := index + 1
        ].
        aStream lf
    ].

    aStream nextPutAll: ')'
]

}.

LTMatrix category: 'filling' methods: {
:[fillWithIndices
    let elementCount := rows * columns.
    1 to: elementCount do: [:i |
        (data at: i) := i castTo: Int32
    ].
].
}.

Compiler isSandboxed ifTrue: [
    Constant namedC: #main value: [<Int32> :argc<Int32> :argv<LibC ConstCString pointer> |
        <localReturn>

        let s := 4.
        argc >= 2 ifTrue: [
            s := LibC atoi #{argv atOffset: 1}
        ].

        let out := FileStream stdout.
        let a := (LTMatrix rows: s columns: s) fillWithIndices.
        let b := (LTMatrix rows: s columns: s) fillWithIndices * 4.0.

		argc <= 2 ifTrue: [
        	out nextPutAll: 'A = '; print: a; lf.
        	out nextPutAll: 'B = '; print: b; lf.
        	out nextPutAll: 'A + B = '; print: a + b; lf.
        	out nextPutAll: 'A - B = '; print: a - b; lf.
        	out nextPutAll: 'A * B = '; print: a * b; lf.
		] ifFalse: [
			a + b.
	        a - b.
	        a * b.
		].

        ^ 0
	]
]
